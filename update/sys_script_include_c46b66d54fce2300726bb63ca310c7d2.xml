<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58872_needit.NeedItUtils</api_name>
        <client_callable>false</client_callable>
        <description>Utils Script Include for the NeedIt application.</description>
        <name>NeedItUtils</name>
        <script><![CDATA[var NeedItUtils = Class.create();
NeedItUtils.prototype = {
    initialize: function() {
    },
/*

Challenge:  Do not allow same-day requests
	 Get the date portion of rightnow and whenNeeded (no timestamp)
	var today = rightnow.getLocalDate();
	var istoday = whenNeeded.getLocalDate();
	 Compare today and istoday to see if they are the same day
	if(today.compareTo(istoday) == 0){
		gs.addErrorMessage("You cannot submit NeedIt requests for today.");
		current.setAbortAction(true);
	}
	
	isDateToday: function(strDate){
		
		// Create GlideDateTime objects for the current date and the passed in date
		var rightnow = new GlideDateTime();
		var testdate = new GlideDateTime(strDate);
		// Get the date portion of rightnow and testdate (no timestamp)
		var today = rightnow.getLocalDate();
		var istoday = testdate.getLocalDate();
	
		// Compare today and istoday to see if they are the same day
		if(today.compareTo(istoday) == 0){
			return true;
		}
		else {
			return false;
		}
	},
	
	
	isDatePast: function(strDate){
		// Create GlideDateTime objects for the current date and the passed in date
		var rightnow = new GlideDateTime();
		var testdate = new GlideDateTime(strDate);
		
		// If the testdate is before rightnow, return true, else return false
		if (testdate.before(rightnow)) {
			return true;
		}
		else {
			return false;
		}
	},
	
*/
	
	sDateToday: function(strDate){
		
		// Create GlideDateTime objects for the current date and the passed in date
		var rightnow = new GlideDateTime();
		var testdate = new GlideDateTime(strDate);
		// Get the date portion of rightnow and testdate (no timestamp)
		//var today = rightnow.getLocalDate();
		//var istoday = testdate.getLocalDate();
		
		// pass the When needed field value to the isDateToday method in NeedItUtils
	var isToday = niutils.isDateToday(current.u_when_needed);
	
		// if the isDateToday method returns true the When needed date is today 
	if(isToday == true){
		gs.addErrorMessage("You cannot submit NeedIt requests for today.");
		current.setAbortAction(true);
	}
		
		
	},
    type: 'NeedItUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-27 14:25:20</sys_created_on>
        <sys_id>c46b66d54fce2300726bb63ca310c7d2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>NeedItUtils</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_c46b66d54fce2300726bb63ca310c7d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-27 14:57:54</sys_updated_on>
    </sys_script_include>
</record_update>
